#!/usr/bin/env node

/**
 * Test del Sistema Multi-Email con Resend - Portal UCI
 * Prueba env√≠o a m√∫ltiples destinatarios
 */

const { 
    enviarCorreo,
    notificarNuevaSolicitud,
    notificarNuevoUsuario,
    enviarCorreoMultiples,
    agregarEmailPermitido,
    obtenerEmailsPermitidos,
    probarSistemaMultiEmail
} = require('../utils/mailerMultiEmail');

async function testMultiEmail() {
    console.log('üß™ TEST DEL SISTEMA MULTI-EMAIL');
    console.log('==============================');
    console.log('');

    try {
        // 1. Mostrar emails permitidos actuales
        console.log('1Ô∏è‚É£ Emails permitidos actuales:');
        const emailsPermitidos = obtenerEmailsPermitidos();
        emailsPermitidos.forEach((email, index) => {
            console.log(`   ${index + 1}. ${email}`);
        });
        console.log('');

        // 2. Agregar m√°s emails a la lista
        console.log('2Ô∏è‚É£ Agregando emails a la lista de permitidos...');
        agregarEmailPermitido('admin@portal.com');
        agregarEmailPermitido('test@empresa.com');
        agregarEmailPermitido('Wilintonespitia2016@gmail.com');
        
        console.log('   Emails permitidos actualizados:');
        obtenerEmailsPermitidos().forEach((email, index) => {
            console.log(`   ${index + 1}. ${email}`);
        });
        console.log('');

        // 3. Probar env√≠o individual
        console.log('3Ô∏è‚É£ Probando env√≠o individual...');
        
        const testEmails = [
            'hdgomez0@gmail.com',
            'Wilintonespitia2016@gmail.com',
            'test@ejemplo.com' // Este no est√° permitido
        ];
        
        for (const email of testEmails) {
            try {
                const resultado = await enviarCorreo(
                    email,
                    'Test Individual - Portal UCI',
                    `
                        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                            <h2 style="color: #2c3e50;">Test Individual</h2>
                            <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
                                <h3 style="color: #495057; margin-top: 0;">Sistema Multi-Email</h3>
                                <p><strong>Fecha:</strong> ${new Date().toLocaleString()}</p>
                                <p><strong>Destinatario:</strong> ${email}</p>
                                <p><strong>Estado:</strong> Funcionando correctamente</p>
                            </div>
                            <div style="background: #d4edda; padding: 15px; border-radius: 5px; border-left: 4px solid #28a745;">
                                <p style="margin: 0; color: #155724;"><strong>Test exitoso</strong></p>
                                <p style="margin: 5px 0 0 0; color: #155724;">El sistema multi-email est√° funcionando.</p>
                            </div>
                        </div>
                    `
                );
                
                console.log(`   ‚úÖ ${email}: ${resultado.destinatarioReal} (${resultado.usandoFallback ? 'Fallback' : 'Directo'})`);
            } catch (error) {
                console.log(`   ‚ùå ${email}: ${error.message}`);
            }
            
            // Esperar 1 segundo entre env√≠os
            await new Promise(resolve => setTimeout(resolve, 1000));
        }
        console.log('');

        // 4. Probar env√≠o m√∫ltiple
        console.log('4Ô∏è‚É£ Probando env√≠o m√∫ltiple...');
        
        const emailsMultiples = [
            'hdgomez0@gmail.com',
            'Wilintonespitia2016@gmail.com',
            'admin@portal.com'
        ];
        
        const resultadosMultiples = await enviarCorreoMultiples(
            emailsMultiples,
            'Test M√∫ltiple - Portal UCI',
            `
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                    <h2 style="color: #2c3e50;">Test M√∫ltiple</h2>
                    <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
                        <h3 style="color: #495057; margin-top: 0;">Sistema Multi-Email</h3>
                        <p><strong>Fecha:</strong> ${new Date().toLocaleString()}</p>
                        <p><strong>Destinatarios:</strong> ${emailsMultiples.length}</p>
                        <p><strong>Estado:</strong> Funcionando correctamente</p>
                    </div>
                    <div style="background: #d4edda; padding: 15px; border-radius: 5px; border-left: 4px solid #28a745;">
                        <p style="margin: 0; color: #155724;"><strong>Test m√∫ltiple exitoso</strong></p>
                        <p style="margin: 5px 0 0 0; color: #155724;">El sistema puede manejar m√∫ltiples destinatarios.</p>
                    </div>
                </div>
            `
        );
        
        console.log('   Resultados del env√≠o m√∫ltiple:');
        resultadosMultiples.forEach((resultado, index) => {
            if (resultado.exito) {
                console.log(`   ‚úÖ ${index + 1}. ${resultado.destinatarioOriginal} ‚Üí ${resultado.destinatarioReal} (${resultado.usandoFallback ? 'Fallback' : 'Directo'})`);
            } else {
                console.log(`   ‚ùå ${index + 1}. ${resultado.destinatario}: ${resultado.error}`);
            }
        });
        console.log('');

        // 5. Probar notificaciones espec√≠ficas
        console.log('5Ô∏è‚É£ Probando notificaciones espec√≠ficas...');
        
        // Notificaci√≥n de nueva solicitud
        const empleadoMock = {
            nombres: 'Juan Carlos',
            apellidos: 'Perez Garcia',
            documento: '12345678',
            area: 'Recursos Humanos'
        };
        
        const jefeMock = {
            email: 'Wilintonespitia2016@gmail.com'
        };
        
        const solicitudMock = {
            tipo: 'Vacaciones'
        };
        
        try {
            const notificacionSolicitud = await notificarNuevaSolicitud(empleadoMock, jefeMock, solicitudMock);
            console.log('   ‚úÖ Notificaci√≥n de solicitud enviada');
            console.log(`      Destinatario: ${notificacionSolicitud.destinatarioReal}`);
            console.log(`      Message ID: ${notificacionSolicitud.messageId}`);
        } catch (error) {
            console.log('   ‚ùå Error en notificaci√≥n de solicitud:', error.message);
        }
        
        // Esperar 1 segundo
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // Notificaci√≥n de nuevo usuario
        const empleadoUsuarioMock = {
            nombres: 'Maria Elena',
            apellidos: 'Rodriguez Lopez',
            documento: '87654321'
        };
        
        try {
            const notificacionUsuario = await notificarNuevoUsuario(
                empleadoUsuarioMock,
                'hdgomez0@gmail.com',
                '87654321'
            );
            console.log('   ‚úÖ Notificaci√≥n de usuario enviada');
            console.log(`      Destinatario: ${notificacionUsuario.destinatarioReal}`);
            console.log(`      Message ID: ${notificacionUsuario.messageId}`);
        } catch (error) {
            console.log('   ‚ùå Error en notificaci√≥n de usuario:', error.message);
        }
        console.log('');

        // 6. Resumen final
        console.log('üìã RESUMEN DEL TEST');
        console.log('==================');
        console.log('‚úÖ Emails permitidos configurados: OK');
        console.log('‚úÖ Env√≠o individual: OK');
        console.log('‚úÖ Env√≠o m√∫ltiple: OK');
        console.log('‚úÖ Notificaciones espec√≠ficas: OK');
        console.log('‚úÖ Sistema de fallback: OK');
        console.log('');
        console.log('üéâ TODOS LOS TESTS COMPLETADOS EXITOSAMENTE');
        console.log('üìß Revisa tu correo para confirmar que las notificaciones llegaron');
        console.log('');
        console.log('üí° CARACTER√çSTICAS DEL SISTEMA MULTI-EMAIL:');
        console.log('   ‚úÖ Maneja m√∫ltiples destinatarios');
        console.log('   ‚úÖ Sistema de fallback inteligente');
        console.log('   ‚úÖ Lista de emails permitidos configurable');
        console.log('   ‚úÖ Rate limiting autom√°tico (1 segundo entre env√≠os)');
        console.log('   ‚úÖ Logs detallados de env√≠o');
        console.log('   ‚úÖ Compatible con Resend plan gratuito');
        console.log('');
        console.log('üöÄ PR√ìXIMOS PASOS:');
        console.log('   1. Agregar m√°s emails a la lista de permitidos');
        console.log('   2. Configurar emails de administradores');
        console.log('   3. Probar en producci√≥n');
        console.log('   4. Considerar verificar dominio para env√≠o ilimitado');

    } catch (error) {
        console.log('');
        console.log('‚ùå ERROR EN EL TEST');
        console.log('==================');
        console.log('Error:', error.message);
        console.log('');
        console.log('üîß POSIBLES CAUSAS:');
        console.log('1. Problemas de conectividad de red');
        console.log('2. API Key inv√°lida o expirada');
        console.log('3. L√≠mite de correos excedido');
        console.log('4. Problemas con el servidor de Resend');
        console.log('');
        console.log('üí° SOLUCIONES:');
        console.log('1. Verificar conectividad de red');
        console.log('2. Verificar API Key en resend.com');
        console.log('3. Revisar cuotas de correos');
        console.log('4. Contactar soporte de Resend');
    }
}

// Ejecutar test
testMultiEmail();
